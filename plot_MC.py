
import matplotlib.pyplot as plt
import numpy as np
from numpy import diff
import math 
from matplotlib import rc
# import matplotlib as mpl

# mpl.use("pgf")

# pgf_with_latex = {                      
#     "pgf.preamble": "\n".join([ 
#         r"\usepackage[detect-all,locale=DE]{siunitx}",
#         ])
#     }
# mpl.rcParams.update(pgf_with_latex)


def moving_average(a, n=3) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret[n - 1:] / n

#Index for each physical object in text files generated by Monte Carlo code.
#   Energy: 1
#   Voltage: 3
#   Coverage: 7
#   Charge: 10

list_voltage = np.arange(4.4, 6.01,0.01)
kB = 1.38E-23/(1.6E-19)                 # Voltzmann constant in eV
T = 300.0 
surface_capacitance = 10
area = 6.2*6.3                          
capacitance = surface_capacitance/100/16*area
d_mu_H = 0
#pH_L = [0.3,1,2,5,7,10,13]
#pH_L = [1,2,7,10, 13]
pH_L=[1,2.8,6.5,12,13]
gamma_L = [0.2,0.4,0.6,0.8,1]



#Initialize Lists
x = []
y = []
f_L = []
coord_L=[]
Dcoord_L=[]



#Strain Files

f_L.append(open("MC_Data/Nathan_nqv_pH_%s_gamma_[%s]_Vi_%sVf_%s_Cap_%s.txt"%(13,1,list_voltage[0], round(list_voltage[-1]),surface_capacitance),'r'))

#pH Files

# for pH in pH_L:
#     #f_L.append(open("Biased_pHDependance/Cap_10.000000000000002_d_mu_0_pH_%s.txt"%(pH),'r'))
#     #f_L.append(open("Biased_pHDependance/Vi_3.0Cap_%s_d_mu_%s_pH_%s.txt"%(capacitance*100*16/area,d_mu_H,pH),'r'))
#     #f_L.append(open("Nathan_gammaDependance/pH_%s_gamma_%s_Vi_%sVf_%s_Cap_%s.txt"%(pH,0.6,list_voltage[0], round(list_voltage[-1]),surface_capacitance),'r'))
#     f_L.append(open("Nathan_pHDependance/nqv_pH_%s_gamma_%s_Vi_%sVf_%s_Cap_%s.txt"%(pH,1,list_voltage[0], round(list_voltage[-1]),surface_capacitance),'r'))
#     #f_L.append(open("Incorrect_energies_Strain/Strain1_nqv_pH_%s_gamma_%s_Vi_%sVf_%s_Cap_%s.txt"%(pH,1,list_voltage[0], round(list_voltage[-1]),surface_capacitance),'r'))



#Extracting coordinates from files

for f, pH in zip(f_L, [1,13]):
    x=[]
    y=[]
    for line in f:
        lines = [i for i in line.split()]
        x.append(float(lines[3]) - 4.4 + kB*T*math.log(10)*pH)
        y.append(float(lines[10]))
    coord_L.append([x, y])
    dydx = moving_average(diff(y)/diff(x), n=5) #moving_average(diff(y)/diff(x), n=50)
    Dcoord_L.append([x[:len(dydx)], dydx.tolist()])


Legend = []

#plot per pH

# n=0
# for pH in pH_L:
#     #plt.plot(coord_L[n][0],coord_L[n][1], marker = 'o', label='pH=%s'%(pH))
#     #plt.plot(coord_L[n+1][0],coord_L[n+1][1], marker = 'o', label='%s, pH=%s'%("qv", pH))
#     plt.plot(Dcoord_L[n][0],Dcoord_L[n][1], marker = 'o', label='pH=%s'%(pH))
#     #plt.plot(Dcoord_L[n+1][0],Dcoord_L[n+1][1], marker = 'o', label='%s, pH=%s'%("qv", pH))
#    n+=1



#plot per strain

plt.plot(coord_L[0][1],coord_L[0][0], marker = 'o', label='Nathan, Strain %s, pH = %s'%(0,13))
#plt.plot(Dcoord_L[0][0],Dcoord_L[0][1], marker = 'o', label='Nathan, Strain %s, pH = %s'%(0,13))

for l in range(1, len(coord_L)):
    plt.plot(coord_L[l][1],coord_L[l][0], marker = 'o')
    #plt.plot(Dcoord_L[l][0],Dcoord_L[l][1], marker = 'o')
    if l-1 == 0:
        Legend.append("Strain = 0%[1-10], 0% [001]")
    elif l-1 == 1:
        Legend.append("Strain = +2.3% [1-10], -4.9% [001]")

#â„«

plt.ylabel(r'$V_{applied}$' + ' ' + '(vs. RHE)', fontsize = 15)
#plt.ylabel(r'$I$' + ' '+ r'$(A/e\AA^2)$', fontsize = 15)
plt.xlabel(r'$Q$' + ' '+ r'$(e)$', fontsize = 15)

if len(Legend)>1:
    plt.legend(Legend, fontsize="15", loc ="upper left")
else:
    plt.legend(fontsize="15", loc ="upper left")

plt.savefig("plot_MC.png",dpi=600)

